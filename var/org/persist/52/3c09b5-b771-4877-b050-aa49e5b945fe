;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[nil nil #2=(headline (:standard-properties [1 1 29 16057 16057 0 #1=(:title) first-section element t nil 31 16055 1 nil nil nil #9=(org-data (:standard-properties [1 1 1 16057 16057 0 nil org-data nil t nil 3 16057 nil nil nil nil nil] :path "/home/nori/.emacs.d/config.org" :fragile-cache nil :CATEGORY "config"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 26) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil :fragile-cache nil)) 0] [nil nil #12=(headline (:standard-properties [2093 2093 2101 2310 2310 0 #1# nil element t nil 2103 2308 2 nil nil nil #2#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 6) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #10=(headline (:standard-properties [907 907 950 2093 2093 0 #1# nil element t nil 952 2091 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 42) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [[nil nil #16=(headline (:standard-properties [3405 3405 3414 3529 3529 0 #1# nil element t nil 3416 3527 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil nil #6=(headline (:standard-properties [4067 4067 4118 5143 5143 0 #1# nil element t nil 4120 5141 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 50) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #19=(headline (:standard-properties [3529 3529 3542 4067 4067 0 #1# nil element t nil 3544 4065 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #13=(headline (:standard-properties [2310 2310 2320 3405 3405 0 #1# nil element t nil 2322 3403 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [[nil nil #22=(headline (:standard-properties [4418 4418 4432 4693 4693 0 #1# nil element t nil 4434 4691 3 nil nil nil #6#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 13) t] :title #3# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [[nil nil #26=(headline (:standard-properties [4904 4904 4915 5143 5143 0 #1# nil element t nil 4917 5141 3 nil nil nil #6#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 10) t] :title #3# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] nil #28=(headline (:standard-properties [5143 5143 5154 5358 5358 0 #1# nil element t nil 5156 5356 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 10) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) -1] #24=(headline (:standard-properties [4693 4693 4708 4904 4904 0 #1# nil element t nil 4710 4902 3 nil nil nil #6#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 14) t] :title #3# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #21=(headline (:standard-properties [4118 4118 4130 4418 4418 0 #1# section element t nil 4132 4416 3 nil nil nil #6#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 11) t] :title #3# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [[[nil nil #32=(headline (:standard-properties [6126 6126 6135 6429 6429 0 #1# nil element t nil 6137 6427 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil [nil nil #37=(headline (:standard-properties [7715 7715 7731 8344 8344 0 #1# nil element t nil 7733 8342 3 nil nil nil #7=(headline (:standard-properties [6429 6429 6445 8344 8344 0 #1# nil element t nil 6447 8342 2 nil nil nil #2#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 15) t] :title #3# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #35=(headline (:standard-properties [6445 6445 6476 7715 7715 0 #1# section element t nil 6478 7713 3 nil nil nil #7#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 30) t] :title #3# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #7# 1] [[nil [nil nil #41=(headline (:standard-properties [11745 11745 11779 12563 12563 0 #1# nil element t nil 11781 12561 3 nil nil nil #8=(headline (:standard-properties [8344 8344 8363 12563 12563 0 #1# nil element t nil 8365 12561 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 18) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 33) t] :title #3# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #39=(headline (:standard-properties [8363 8363 8403 11745 11745 0 #1# section element t nil 8405 11743 3 nil nil nil #8#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (4 38) t] :title #3# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] [[nil nil #45=(headline (:standard-properties [13209 13209 13226 13927 13927 0 #1# nil element t nil 13228 13925 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [[nil nil #48=(headline (:standard-properties [14591 14591 14606 15483 15483 0 #1# nil element t nil 14608 15481 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] nil #49=(headline (:standard-properties [15483 15483 15499 16057 16057 0 #1# nil element t nil 15501 16055 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) -1] #46=(headline (:standard-properties [13927 13927 13950 14591 14591 0 #1# nil element t nil 13952 14589 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil :fragile-cache nil)) 1] #43=(headline (:standard-properties [12563 12563 12578 13209 13209 0 #1# nil element t nil 12580 13207 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #8# 1] #30=(headline (:standard-properties [5358 5358 5374 6126 6126 0 #1# nil element t nil 5376 6124 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[nil nil #9# 0] [nil nil (section (:standard-properties [29 29 29 907 907 0 nil section element t nil 29 907 nil nil nil nil #2#])) 0] #2# 0] [[nil nil #11=(section (:standard-properties [950 950 950 2093 2093 0 nil section element t nil 950 2093 nil nil nil nil #10#])) 0] [nil nil (src-block (:standard-properties [1010 1025 nil nil 2093 1 nil nil element t nil nil nil nil nil nil nil #11#] :language #15="elisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Enables basic packaging support\12  (require 'package)\12  (unless package-archive-contents\12    (package-refresh-contents))\12\12\12  ;; MELPA\12  ;; Adds the Melpa archive to the list of available repositories\12  (add-to-list 'package-archives '(\"melpa\" . \"http://melpa.org/packages/\"))\12  (add-to-list 'package-archives '(\"gnu\" . \"https://elpa.gnu.org/packages/\"))\12\12\12  ;; Initializes the package infrastructure\12  (package-initialize)\12\12  ;; USE-PACKAGE\12  ;; If we don't have the use-package package, we need to refresh contents and install it. The rest will be installed with it\12  (unless (package-installed-p 'use-package)\12    (package-refresh-contents)\12    (package-install 'use-package))\12\12  ;; ENV\12  ;; Set locale and encoding for better subprocess compatibility\12  (setenv \"LC_TIME\" \"C\")      ; English day/month/month names\12  (setenv \"LC_MESSAGES\" \"C\")  ; English messages from Git/Grep\12  (setenv \"LANG\" \"C\")\12  (set-language-environment \"English\")\12  (prefer-coding-system 'utf-8)\12\12  ;; NO LITTERING\12  (use-package no-littering\12    :ensure t)\12\12" :name "melpa")) 0] (paragraph (:standard-properties [950 950 950 1009 1010 1 nil planning element t nil nil nil nil nil nil nil #11#])) 0] #10# 0] [[[nil nil #14=(section (:standard-properties [2101 2101 2101 2310 2310 0 nil section element t nil 2101 2310 nil nil nil nil #12#])) 0] [nil nil #13# 0] (src-block (:standard-properties [2101 2113 nil nil 2310 1 nil planning element t nil nil nil nil nil nil nil #14#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq org-capture-templates\12      '((\"i\" \"Inbox Entry\" entry\12\11 (file+headline \"~/Documents/Notes/0000--entry-point.org\" \"Inbox\")\12\11 \"** %^{Note}\\n:CREATED: %U\")))      \12" :name "org")) 0] [[nil nil (src-block (:standard-properties [2320 2335 nil nil 3385 1 nil planning element t nil nil nil nil nil nil nil #17=(section (:standard-properties [2320 2320 2320 3405 3405 0 nil section element t nil 2320 3405 nil nil nil nil #13#]))] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package denote\12  :ensure t\12  :hook (dired-mode . denote-dired-mode)\12  :bind\12  ((\"C-c n n\" . denote)\12   (\"C-c n r\" . denote-rename-file)\12   (\"C-c n l\" . denote-link)\12   (\"C-c n b\" . denote-backlinks)\12   (\"C-c n d\" . denote-dired)\12   (\"C-c n g\" . denote-grep)\12   (\"C-c n o\" . denote-open-or-create)\12   (\"C-c n c\" . denote-link-after-creating)\12   )\12  :config\12  (setq denote-directory (expand-file-name \"~/Documents/Notes\"))\12  (setq denote-known-keywords '(\"source\" \"project\" \"archived\" \"zk\" \"attach\"))\12  (setq denote-excluded-directories-regexp '(\"OldZK\" \".git\" \".stfolder\"))\12  ;; When creating a note from another, automatically link to it\12  ;; (setq denote-link-after-creating t)\12  ;; Automatically rename Denote buffers when opening them so that\12  ;; instead of their long file name they have, for example, a literal\12  ;; \"[D]\" followed by the file's title.  Read the doc string of\12  ;; `denote-rename-buffer-format' for how to modify this.\12  (denote-rename-buffer-mode 1)\12  )\12\12(use-package denote-org\12  :ensure t)\12" :name "denote")) 0] [nil nil #18=(section (:standard-properties [3414 3414 3414 3529 3529 0 nil section element t nil 3414 3529 nil nil nil nil #16#])) 0] #16# 0] #17# 0] #12# 0] [[[[nil nil (src-block (:standard-properties [3444 3458 nil nil 3529 1 nil nil element t nil nil nil nil nil nil nil #18#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; MAGIT\12(use-package magit\12  :ensure t\12)\12" :name "magit")) 0] [nil nil #20=(section (:standard-properties [3542 3542 3542 4067 4067 0 nil section element t nil 3542 4067 nil nil nil nil #19#])) 0] #19# 0] [[nil nil (src-block (:standard-properties [3579 3597 nil nil 4067 1 nil nil element t nil nil nil nil nil nil nil #20#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; ORG-BABEL\12(org-babel-do-load-languages\12 'org-babel-load-languages\12 '(\12   (python . t)\12   (shell . t)\12   (emacs-lisp . t)))\12\12;; to syntax highlight code in babel and to remove the \"Do you want to execute?\" question\12(setq org-confirm-babel-evaluate nil\12      org-src-fontify-natively t\12      org-src-tab-acts-natively t\12      org-src-preserve-indentation t\12      )\12(setq python-indent-guess-indent-offset nil)\12(setq python-indent-offset 4)\12" :name "org-babel")) 0] [nil nil #21# 0] #6# 0] (paragraph (:standard-properties [3542 3542 3542 3578 3579 1 nil planning element t nil nil nil nil nil nil nil #20#])) 0] [[[nil nil (paragraph (:standard-properties [4130 4130 4130 4255 4255 0 nil planning element t nil nil nil nil nil nil nil #23=(section (:standard-properties [4130 4130 4130 4418 4418 0 nil section element t nil 4130 4418 nil nil nil nil #21#]))])) 0] [nil nil #22# 0] (src-block (:standard-properties [4255 4271 nil nil 4418 1 nil nil element t nil nil nil nil nil nil nil #23#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; VERTICO\12(use-package vertico\12  :ensure t\12  :init\12  (vertico-mode)\12  :config\12(setq enable-recursive-minibuffers t))\12" :name "vertico")) 0] [[nil nil (paragraph (:standard-properties [4432 4432 4432 4468 4468 0 nil planning element t nil nil nil nil nil nil nil #25=(section (:standard-properties [4432 4432 4432 4693 4693 0 nil section element t nil 4432 4693 nil nil nil nil #22#]))])) 0] [nil nil #24# 0] (src-block (:standard-properties [4468 4486 nil nil 4693 1 nil nil element t nil nil nil nil nil nil nil #25#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; ORDERLESS\12(use-package orderless\12  :ensure t\12  :custom\12  (completion-styles '(orderless basic))\12  (completion-category-overrides '((file (styles basic partial-completion)))))\12" :name "orderless")) 0] #25# 0] #23# 0] (paragraph (:standard-properties [3414 3414 3414 3443 3444 1 nil planning element t nil nil nil nil nil nil nil #18#])) 0] [[[[[nil nil (paragraph (:standard-properties [4708 4708 4708 4775 4775 0 nil planning element t nil nil nil nil nil nil nil #27=(section (:standard-properties [4708 4708 4708 4904 4904 0 nil section element t nil 4708 4904 nil nil nil nil #24#]))])) 0] [nil nil #26# 0] (src-block (:standard-properties [4775 4794 nil nil 4904 1 nil nil element t nil nil nil nil nil nil nil #27#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; MARGINALIA\12(use-package marginalia\12  :ensure t\12  :config\12  (marginalia-mode))\12" :name "marginalia")) 0] [[nil nil (paragraph (:standard-properties [4915 4915 4915 4977 4977 0 nil planning element t nil nil nil nil nil nil nil #29=(section (:standard-properties [4915 4915 4915 5143 5143 0 nil section element t nil 4915 5143 nil nil nil nil #26#]))])) 0] [nil nil #28# 0] (src-block (:standard-properties [4977 4992 nil nil 5143 3 nil nil element t nil nil nil nil nil nil nil #29#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; EMBARK\12(use-package embark\12  :ensure t\12  :bind\12  ((\"C-.\" . embark-act))         ;; pick some comfortable binding\12  )\12" :name "embark")) 0] #29# 0] [[nil nil (paragraph (:standard-properties [5154 5154 5154 5224 5224 0 nil planning element t nil nil nil nil nil nil nil #31=(section (:standard-properties [5154 5154 5154 5358 5358 0 nil section element t nil 5154 5358 nil nil nil nil #28#]))])) 0] [nil nil #30# 0] (src-block (:standard-properties [5224 5240 nil nil 5358 2 nil nil element t nil nil nil nil nil nil nil #31#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; OX-HUGO\12(use-package ox-hugo\12  :after (org)\12  :ensure t\12  :pin melpa\12  :after ox\12  )\12" :name "ox-hugo")) 0] #31# -1] [[[nil nil (paragraph (:standard-properties [5374 5374 5374 5475 5475 0 nil planning element t nil nil nil nil nil nil nil #33=(section (:standard-properties [5374 5374 5374 6126 6126 0 nil section element t nil 5374 6126 nil nil nil nil #30#]))])) 0] [nil nil #32# 0] (src-block (:standard-properties [5475 5496 nil nil 6126 1 nil nil element t nil nil nil nil nil nil nil #33#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package languagetool\12  :ensure t\12  :defer t\12  :commands (languagetool-check\12             languagetool-clear-suggestions\12             languagetool-correct-at-point\12             languagetool-correct-buffer\12             languagetool-set-language\12             languagetool-server-mode\12             languagetool-server-start\12             languagetool-server-stop)\12  :config\12  (setq languagetool-java-arguments '(\"-Dfile.encoding=UTF-8\")\12        languagetool-console-command \"~/.languagetool/languagetool-commandline.jar\"\12        languagetool-server-command \"~/.languagetool/languagetool-server.jar\"))\12" :name "languagetool")) 0] [[nil nil (paragraph (:standard-properties [6135 6135 6135 6193 6193 0 nil planning element t nil nil nil nil nil nil nil #34=(section (:standard-properties [6135 6135 6135 6429 6429 0 nil section element t nil 6135 6429 nil nil nil nil #32#]))])) 0] [nil nil #7# 0] (src-block (:standard-properties [6193 6207 nil nil 6411 1 nil nil element t nil nil nil nil nil nil nil #34#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; THEME\12(require 'ef-themes)\12\12(load-theme 'ef-autumn :no-confirm)\12\12(setq ef-themes-to-toggle '(ef-autumn ef-cyprus))\12\12(define-key global-map (kbd \"<f5>\") #'ef-themes-toggle)\12" :name "theme")) 0] #34# 0] #33# -1] #27# 0] [[[[[nil nil #36=(section (:standard-properties [6476 6476 6476 7715 7715 0 nil section element t nil 6476 7715 nil nil nil nil #35#])) 0] [nil nil (src-block (:standard-properties [6514 6530 nil nil 7715 1 nil nil element t nil nil nil nil nil nil nil #36#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; ===================================\12;; Basic Customization\12;; ===================================\12\12;; Allow for manual resizing of images in org.\12;; Set org-image width to nil, so it can be set manually\12(setq org-image-actual-width nil)\12\12;; Enable word wrap\12(add-hook 'text-mode-hook 'turn-on-visual-line-mode)\12\12;; Set visible bell instead of sound\12(setq visible-bell 1)\12\12;; Auto save buffer if idled for 2 seconds.\12;; https://whhone.com/emacs-config/#taking-note-with-org-roam.\12(setq auto-save-timeout 2)\12(auto-save-visited-mode +1)\12\12;; Watch and reload the file changed on the disk.\12(global-auto-revert-mode +1)\12(setq auto-revert-remote-files t)\12\12;; Delete the selected text first before editing.\12;; https://whhone.com/emacs-config/#taking-note-with-org-roam.\12(delete-selection-mode +1)\12\12;; Disable splash screen\12(setq inhibit-startup-message t)\12\12;; Smooth Scrolling\12;; https://www.emacswiki.org/emacs/SmoothScrolling.\12(setq scroll-conservatively 10000\12      scroll-step 1)\12\12(use-package markdown-mode\12  :ensure t\12  )\12\12(use-package darkroom\12  :ensure t\12  )\12\12;; Line numbers in terminal\12(when (display-graphic-p)\12  (global-display-line-numbers-mode))\12\12" :name "custom1")) 0] (paragraph (:standard-properties [6476 6476 6476 6513 6514 1 nil planning element t nil nil nil nil nil nil nil #36#])) 0] [[nil nil #38=(section (:standard-properties [7731 7731 7731 8344 8344 0 nil section element t nil 7731 8344 nil nil nil nil #37#])) 0] [nil nil (src-block (:standard-properties [7981 8001 nil nil 8344 1 nil nil element t nil nil nil nil nil nil nil #38#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; MIXED-PITCH\12(use-package mixed-pitch\12  :ensure t\12  :hook\12  (text-mode . mixed-pitch-mode)\12  :config\12  (set-face-attribute 'default nil :font \"DejaVu Sans Mono\" :height 130)\12  (set-face-attribute 'fixed-pitch nil :font \"DejaVu Sans Mono\")\12  (set-face-attribute 'variable-pitch nil :font \"Liberation Sans\")\12  )\12\12\12" :name "mixed-pitch")) 0] (paragraph (:standard-properties [7731 7731 7731 7981 7981 0 nil planning element t nil nil nil nil nil nil nil #38#])) 0] #37# 0] [[nil nil #39# 0] [nil nil (src-block (:standard-properties [8403 8403 nil nil 9535 1 nil planning element t nil nil nil nil nil nil nil #40=(section (:standard-properties [8403 8403 8403 11745 11745 0 nil section element t nil 8403 11745 nil nil nil nil #39#]))] :language #53="bash" :switches nil :parameters ":tangle ~/.emacs.d/autopull.sh" :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "#!/bin/bash\12\12# Function to pull changes for a given repository\12function pull_changes {\12    local repo_path=$1\12\12    if [[ -z \"$repo_path\" ]]; then\12        echo \"Repository path is required.\"\12        return 1\12    fi\12\12    if [[ ! -d \"$repo_path\" ]]; then\12        echo \"Directory $repo_path does not exist.\"\12        return 1\12    fi\12\12    # Navigate to the Git repository\12    cd \"$repo_path\" || return 1\12\12    # Get the current branch\12    currentBranch=$(git symbolic-ref --short HEAD)\12\12    if [[ -z \"$currentBranch\" ]]; then\12        echo \"Failed to determine the current branch in $repo_path.\"\12        return 1\12    fi\12\12    echo \"Current branch in $repo_path: $currentBranch\"\12\12    # Pull changes from the remote repository\12    echo \"Pulling changes for branch $currentBranch...\"\12    git pull origin \"$currentBranch\"\12\12}\12\12# List of repositories\12repos=(\12    \"/home/nori/Documents/noriparelius\"\12    \"/home/nori/.emacs.d\"\12)\12\12# Iterate over the list and call the function for each repository\12for repo in \"${repos[@]}\"; do\12    pull_changes \"$repo\"\12done\12read -p \"Press enter to continue\"\12")) 0] #40# 0] #8# -1] [[[[[nil nil (src-block (:standard-properties [11151 11172 nil nil 11486 1 nil nil element t nil nil nil nil nil nil nil #40#] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(defun nori-autopull ()\12  \"Run my git autopull Bash script.\"\12  (interactive)\12  (shell-command \"bash /home/nori/.emacs.d/autopull.sh\"))\12\12(defun nori-autopush ()\12  \"Run my git autocommitpush Bash script.\"\12  (interactive)\12  (shell-command \"bash /home/nori/.emacs.d/autocommitpush.sh\"))\12\12" :name "autopullpush")) 0] nil #41# -1] [nil nil (src-block (:standard-properties [11779 11805 nil nil 12496 1 nil planning element t nil nil nil nil nil nil nil #42=(section (:standard-properties [11779 11779 11779 12563 12563 0 nil section element t nil 11779 12563 nil nil nil nil #41#]))] :language #15# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun nori-insert-org-list-of-page-links (dir)\12  \"Insert org-mode list items linking to all .jpg files in DIR.\12Assumes filenames are of the form pages_<desc>.jpg and uses <dirname>_<desc> as link text.\"\12  (interactive \"DSelect directory: \")\12  (let ((dir-name (file-name-nondirectory (directory-file-name dir)))\12\11(files (directory-files dir nil \"\\\\.jpg$\"))) ;; nil is for not FULL path\12    (dolist (file files)\12      (let* ((desc (string-remove-suffix \".jpg\" (string-remove-prefix \"pages_\" file)))\12\11     (rel-path (file-relative-name (expand-file-name file dir)\12\11\11\11\11\11   default-directory)))\12\11(insert (format \"*** [[./%s][%s_%s]]\\n\" rel-path dir-name desc))))))\12\12" :name "insert-page-links")) 0] #42# -1] [[nil [nil nil (src-block (:standard-properties [12578 12591 nil nil 13209 1 nil planning element t nil nil nil nil nil nil nil #44=(section (:standard-properties [12578 12578 12578 13209 13209 0 nil section element t nil 12578 13209 nil nil nil nil #43#]))] :language #15# :switches nil :parameters ":tangle ~/.emacs.d/home.el :noweb strip-export" :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "<<melpa>>\12<<org>>\12<<denote>>\12<<magit>>\12<<org-babel>>\12<<vertico>>\12<<orderless>>\12<<marginalia>>\12<<embark>>\12<<ox-hugo>>\12<<languagetool>>\12<<theme>>\12\12<<custom1>>\12<<mixed-pitch>>\12<<autopullpush>>\12<<insert-page-links>>\12\12;; Enable line numbers globally\12;;(global-linum-mode t) deprecated since Emacs 29 https://emacs.stackexchange.com/questions/78369/what-to-use-instead-of-linum-mode-in-emacs-29\12(global-display-line-numbers-mode t)\12\12(add-hook 'kill-emacs-hook #'nori-autopush) ;; to run it on exit\12(nori-autopull)\12;; User-Defined init.el ends here\12" :name "home")) 0] #44# 1] [[nil nil #47=(section (:standard-properties [13226 13226 13226 13927 13927 0 nil section element t nil 13226 13927 nil nil nil nil #45#])) 0] [nil nil #46# 0] (src-block (:standard-properties [13226 13294 nil nil 13927 1 nil planning element t nil nil nil nil nil nil nil #47#] :language #15# :switches nil :parameters ":tangle ~/.emacs.d/chrome.el :noweb strip-export" :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "<<melpa>>\12<<org>>\12<<denote>>\12;; <<magit>>\12<<org-babel>>\12<<vertico>>\12<<orderless>>\12<<marginalia>>\12<<embark>>\12;; <<ox-hugo>>\12;; <<languagetool>>\12<<theme>>\12\12<<custom1>>\12<<mixed-pitch>>\12<<autopullpush>> \12<<insert-page-links>>\12\12;; Enable line numbers globally\12;;(global-linum-mode t) deprecated since Emacs 29 https://emacs.stackexchange.com/questions/78369/what-to-use-instead-of-linum-mode-in-emacs-29\12;; (global-display-line-numbers-mode t)\12\12(add-hook 'kill-emacs-hook #'nori-autopush) ;; to run it on exit\12(nori-autopull)\12;; User-Defined init.el ends here\12" :name "chrome" :header (":var denote-dir=\"~/Documents/Notes/denote\""))) 0] #45# 0] #43# 0] [[[[nil nil (src-block (:standard-properties [13950 13965 nil nil 14591 1 nil planning element t nil nil nil nil nil nil nil #52=(section (:standard-properties [13950 13950 13950 14591 14591 0 nil section element t nil 13950 14591 nil nil nil nil #46#] :fragile-cache nil))] :language #15# :switches nil :parameters ":tangle ~/.emacs.d/server.el :noweb strip-export" :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "<<melpa>>\12<<org>>\12<<denote>>\12<<magit>>\12<<org-babel>>\12<<vertico>>\12<<orderless>>\12<<marginalia>>\12<<embark>>\12<<ox-hugo>>\12;;<<languagetool>>\12;;<<theme>>\12\12<<custom1>>\12<<mixed-pitch>>\12<<autopullpush>>\12<<insert-page-links>>\12\12;; Enable line numbers globally\12;;(global-linum-mode t) deprecated since Emacs 29 https://emacs.stackexchange.com/questions/78369/what-to-use-instead-of-linum-mode-in-emacs-29\12(global-display-line-numbers-mode t)\12\12;;(add-hook 'kill-emacs-hook #'nori-autopush) ;; to run it on exit\12(nori-autopull)\12;; User-Defined init.el ends here\12" :name "server")) 0] [nil nil #50=(section (:standard-properties [14606 14606 14606 15483 15483 0 nil section element t nil 14606 15483 nil nil nil nil #48#])) 0] #48# 0] [nil nil #49# 0] (src-block (:standard-properties [14606 14716 nil nil 15483 1 nil planning element t nil nil nil nil nil nil nil #50#] :language #15# :switches nil :parameters ":tangle ~/.emacs.d/work.el :noweb strip-export" :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Get Emacs to use xargs and grep and other stuff that is not on Windows\12;; The easiest way is to do it through GIT\12(let ((git-bin \"C:/Program Files/Git/usr/bin\"))\12  (setenv \"PATH\" (concat git-bin \";\" (getenv \"PATH\")))\12  (add-to-list 'exec-path git-bin))\12\12<<melpa>>\12;;<<org>>\12;;<<denote>>\12<<magit>>\12<<org-babel>>\12<<vertico>>\12<<orderless>>\12<<marginalia>>\12<<embark>>\12;; <<ox-hugo>>\12;; <<languagetool>>\12<<theme>>\12\12<<custom1>>\12<<mixed-pitch>>\12\12\12;; Enable line numbers globally\12;;(global-linum-mode t) deprecated since Emacs 29 https://emacs.stackexchange.com/questions/78369/what-to-use-instead-of-linum-mode-in-emacs-29\12(global-display-line-numbers-mode t)\12\12\12;; User-Defined init.el ends here\12" :name "work" :header (":var denote-dir=\"C:/Users/elpar/OneDrive - Forsvarets forskningsinstitutt/MyDocs/Refs\""))) -1] [nil [nil nil (src-block (:standard-properties [15674 15674 nil nil 16057 1 nil nil element t nil nil nil nil nil nil nil #51=(section (:standard-properties [15499 15499 15499 16057 16057 0 nil section element t nil 15499 16057 nil nil nil nil #49#]))] :language #15# :switches nil :parameters ":tangle ~/.emacs.d/init.el :noweb strip-export :results output" :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (cond\12   ((equal system-name \"NoriPCdebian\")\12    (load \"~/.emacs.d/home.el\"))\12   ((equal system-name \"debchrome\")\12    (load \"~/.emacs.d/chrome.el\"))\12   ((equal system-type 'windows-nt)\12    (load \"C:/Users/ELPAR/AppData/Roaming/.emacs.d/work.el\"))\12   (t (load \"~/.emacs.d/server.el\"))\12   )\12")) 0] (paragraph (:standard-properties [15499 15499 15499 15673 15674 1 nil planning element t nil nil nil nil nil nil nil #51#])) 1] #51# -1] #52# 0] (src-block (:standard-properties [9535 9535 nil nil 11151 1 nil nil element t nil nil nil nil nil nil nil #40#] :language #53# :switches nil :parameters ":tangle ~/.emacs.d/autocommitpush.sh" :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "#!/bin/bash\12\12# Function to commit and push changes for a given repository\12function commit_and_push {\12    local repo_path=$1\12\12    if [[ -z \"$repo_path\" ]]; then\12        echo \"Repository path is required.\"\12        return 1\12    fi\12\12    if [[ ! -d \"$repo_path\" ]]; then\12        echo \"Directory $repo_path does not exist.\"\12        return 1\12    fi\12\12    # Navigate to the Git repository\12    cd \"$repo_path\" || return 1\12\12    # Get the current branch\12    currentBranch=$(git symbolic-ref --short HEAD)\12\12    if [[ -z \"$currentBranch\" ]]; then\12        echo \"Failed to determine the current branch in $repo_path.\"\12        return 1\12    fi\12    \12    echo \"Current branch in $repo_path: $currentBranch\"\12\12    # Check for changes\12    if [[ -n $(git status --porcelain) ]]; then\12        echo \"Changes detected in $repo_path, staging changes...\"\12        git add -A\12\12        # Get current date and time\12        currentDate=$(date +'%Y-%m-%d')\12        currentTime=$(date +'%H-%M')\12\12        # Commit changes with a message\12        echo \"Committing changes...\"\12        git commit -m \"Automated commit on $currentDate at $currentTime\"\12\12    else\12        echo \"No changes to commit in $repo_path.\"\12    fi\12    # Push changes to the remote repository\12    echo \"Pushing changes to $currentBranch...\"\12    git push origin \"$currentBranch\"\12\12}\12\12# List of repositories\12repos=(\12    \"/home/nori/Documents/noriparelius\"\12\12)\12\12# Iterate over the list and call the function for each repository\12for repo in \"${repos[@]}\"; do\12    commit_and_push \"$repo\"\12done\12\12read -p \"Press enter to continue\"\12\12")) 1] #35# 0] nil nil 0] org-element--cache-compare)) ((version "2.3")))